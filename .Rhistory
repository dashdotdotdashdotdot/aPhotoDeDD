library(devtools)
use_devtools()
reload
load_all
load_all()
load_all()
devtools::load_all(".")
?adjustPicture
devtools::load_all(".")
library(usethis)
library(devtools)
document()
?adjustPicture
?adjustcolor
devtools::load_all(".")
document()
?adjPicApp
dove = demo_DD()
dove = demo_dd()
adjPicApp(dove)
library(aPhotoDeDD)
usethis::use_import_from("shiny", "shinyApp")
styler::style_txt("
adjustPicture <- function(pictureIn, pixels = 1000, imageFlip = FALSE, imageFlop = FALSE,
imageRotate = 0, bsh = c(100, 100, 100), darkGreyIn = .25, lightGreyIn = .75, crop = c(1, 1, 0, 0),
return = 4, imageNegate = FALSE, maxPixel = 7000, aspect = 0, enlarge = 0, offCenter = 1, offRight = 1, backCol1 = 1) {
# mainPic2
if (enlarge != 0) {
pictureIn <- makeSquare(pictureIn, pad = (1 + enlarge), offCenter = offCenter, offRight = offRight, backCol = backCol1)
}
pixels0 <- min(pixels, maxPixel)
cwh0 <- image_info(pictureIn)[2:3]
cwh_new <- pixels0 * cwh0 / max(cwh0)
mainPic2 <- image_resize(
pictureIn,
geometry_size_pixels(width = cwh_new[1], height = cwh_new[2], preserve_aspect = 'FALSE')
)
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_crop(mainPic2, geometry_area(crop[1] * cwh[[1]], crop[2] * cwh[[2]], crop[3] * cwh[[1]], crop[4] * cwh[[2]]))
if (aspect != 0) {
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_resize(mainPic2, geometry_size_pixels(width = pixels0, height = pixels0 / aspect, preserve_aspect = 'FALSE'))
}
if (imageFlip == TRUE) {
mainPic2 <- image_flip(mainPic2)
}
if (imageFlop == TRUE) {
mainPic2 <- image_flop(mainPic2)
}
if (imageNegate == TRUE) {
mainPic2 <- image_negate(mainPic2)
}
mainPic2 <- image_rotate(mainPic2, imageRotate)
mainPic2 <- image_modulate(mainPic2, brightness = bsh[1], saturation = bsh[2], hue = bsh[3])
#########
if (return > 0) {
cwh1 <- as.numeric(image_info(mainPic2)[2:3])
makeBlack <- function(x) {
if (x > 12) {
return(255)
} else {
return(x)
}
}
#  vapply(pictureIn,FUN=makeBlack())
black <- image_blank(cwh1[1], cwh1[2], col = rgb(0, 0, 0))
white <- image_blank(cwh1[1], cwh1[2], col = rgb(1, 1, 1))
colorNum <- darkGreyIn * rep(1, 3)
darkGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
colorNum <- lightGreyIn * rep(1, 3)
lightGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
step1 <- image_composite(mainPic2, darkGrey, operator = 'lighten') # everything lighter than dark grey
step2 <- image_composite(step1, lightGrey, operator = 'darken') # everything lighter than dark grey and darker than light grey
step3 <- image_normalize(step2) # light Grrey becomes white dark grey becomes black
step4 <- image_composite(mainPic2, lightGrey, operator = 'darken')
lowContrast <- image_composite(step4, step2, operator = 'lighten')
highContrast <- image_normalize(lowContrast)
lessContrast <- image_composite(mainPic2, lowContrast, operator = 'multiply')
moreContrast <- image_composite(mainPic2, highContrast, operator = 'multiply')
}
if (return == 0) {
return(mainPic2)
}
if (return == 1) {
return(step1)
}
if (return == 2) {
return(step2)
}
if (return == 3) {
return(step3)
}
if (return == 4) {
return(step4)
}
if (return == 5) {
return(lessContrast)
}
if (return == 6) {
return(moreContrast)
}
if (return == 7) {
imageStack <- c(mainPic2, step1, step2, step3, step4, lessContrast, moreContrast)
return(image_append(imageStack))
}
}
")
styler::style_text("
adjustPicture <- function(pictureIn, pixels = 1000, imageFlip = FALSE, imageFlop = FALSE,
imageRotate = 0, bsh = c(100, 100, 100), darkGreyIn = .25, lightGreyIn = .75, crop = c(1, 1, 0, 0),
return = 4, imageNegate = FALSE, maxPixel = 7000, aspect = 0, enlarge = 0, offCenter = 1, offRight = 1, backCol1 = 1) {
# mainPic2
if (enlarge != 0) {
pictureIn <- makeSquare(pictureIn, pad = (1 + enlarge), offCenter = offCenter, offRight = offRight, backCol = backCol1)
}
pixels0 <- min(pixels, maxPixel)
cwh0 <- image_info(pictureIn)[2:3]
cwh_new <- pixels0 * cwh0 / max(cwh0)
mainPic2 <- image_resize(
pictureIn,
geometry_size_pixels(width = cwh_new[1], height = cwh_new[2], preserve_aspect = 'FALSE')
)
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_crop(mainPic2, geometry_area(crop[1] * cwh[[1]], crop[2] * cwh[[2]], crop[3] * cwh[[1]], crop[4] * cwh[[2]]))
if (aspect != 0) {
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_resize(mainPic2, geometry_size_pixels(width = pixels0, height = pixels0 / aspect, preserve_aspect = 'FALSE'))
}
if (imageFlip == TRUE) {
mainPic2 <- image_flip(mainPic2)
}
if (imageFlop == TRUE) {
mainPic2 <- image_flop(mainPic2)
}
if (imageNegate == TRUE) {
mainPic2 <- image_negate(mainPic2)
}
mainPic2 <- image_rotate(mainPic2, imageRotate)
mainPic2 <- image_modulate(mainPic2, brightness = bsh[1], saturation = bsh[2], hue = bsh[3])
#########
if (return > 0) {
cwh1 <- as.numeric(image_info(mainPic2)[2:3])
makeBlack <- function(x) {
if (x > 12) {
return(255)
} else {
return(x)
}
}
#  vapply(pictureIn,FUN=makeBlack())
black <- image_blank(cwh1[1], cwh1[2], col = rgb(0, 0, 0))
white <- image_blank(cwh1[1], cwh1[2], col = rgb(1, 1, 1))
colorNum <- darkGreyIn * rep(1, 3)
darkGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
colorNum <- lightGreyIn * rep(1, 3)
lightGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
step1 <- image_composite(mainPic2, darkGrey, operator = 'lighten') # everything lighter than dark grey
step2 <- image_composite(step1, lightGrey, operator = 'darken') # everything lighter than dark grey and darker than light grey
step3 <- image_normalize(step2) # light Grrey becomes white dark grey becomes black
step4 <- image_composite(mainPic2, lightGrey, operator = 'darken')
lowContrast <- image_composite(step4, step2, operator = 'lighten')
highContrast <- image_normalize(lowContrast)
lessContrast <- image_composite(mainPic2, lowContrast, operator = 'multiply')
moreContrast <- image_composite(mainPic2, highContrast, operator = 'multiply')
}
if (return == 0) {
return(mainPic2)
}
if (return == 1) {
return(step1)
}
if (return == 2) {
return(step2)
}
if (return == 3) {
return(step3)
}
if (return == 4) {
return(step4)
}
if (return == 5) {
return(lessContrast)
}
if (return == 6) {
return(moreContrast)
}
if (return == 7) {
imageStack <- c(mainPic2, step1, step2, step3, step4, lessContrast, moreContrast)
return(image_append(imageStack))
}
}
")
adjustPicture <- function(pictureIn, pixels = 1000, imageFlip = FALSE, imageFlop = FALSE,
imageRotate = 0, bsh = c(100, 100, 100), darkGreyIn = .25, lightGreyIn = .75, crop = c(1, 1, 0, 0),
return = 4, imageNegate = FALSE, maxPixel = 7000, aspect = 0, enlarge = 0, offCenter = 1, offRight = 1, backCol1 = 1) {
# mainPic2
if (enlarge != 0) {
pictureIn <- makeSquare(pictureIn, pad = (1 + enlarge), offCenter = offCenter, offRight = offRight, backCol = backCol1)
}
pixels0 <- min(pixels, maxPixel)
cwh0 <- image_info(pictureIn)[2:3]
cwh_new <- pixels0 * cwh0 / max(cwh0)
mainPic2 <- image_resize(
pictureIn,
geometry_size_pixels(width = cwh_new[1], height = cwh_new[2], preserve_aspect = "FALSE")
)
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_crop(mainPic2, geometry_area(crop[1] * cwh[[1]], crop[2] * cwh[[2]], crop[3] * cwh[[1]], crop[4] * cwh[[2]]))
if (aspect != 0) {
cwh <- image_info(mainPic2)[2:3]
mainPic2 <- image_resize(mainPic2, geometry_size_pixels(width = pixels0, height = pixels0 / aspect, preserve_aspect = "FALSE"))
}
if (imageFlip == TRUE) {
mainPic2 <- image_flip(mainPic2)
}
if (imageFlop == TRUE) {
mainPic2 <- image_flop(mainPic2)
}
if (imageNegate == TRUE) {
mainPic2 <- image_negate(mainPic2)
}
mainPic2 <- image_rotate(mainPic2, imageRotate)
mainPic2 <- image_modulate(mainPic2, brightness = bsh[1], saturation = bsh[2], hue = bsh[3])
#########
if (return > 0) {
cwh1 <- as.numeric(image_info(mainPic2)[2:3])
makeBlack <- function(x) {
if (x > 12) {
return(255)
} else {
return(x)
}
}
#  vapply(pictureIn,FUN=makeBlack())
black <- image_blank(cwh1[1], cwh1[2], col = rgb(0, 0, 0))
white <- image_blank(cwh1[1], cwh1[2], col = rgb(1, 1, 1))
colorNum <- darkGreyIn * rep(1, 3)
darkGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
colorNum <- lightGreyIn * rep(1, 3)
lightGrey <- image_blank(cwh1[1], cwh1[2], col = rgb(colorNum[1], colorNum[2], colorNum[3]))
step1 <- image_composite(mainPic2, darkGrey, operator = "lighten") # everything lighter than dark grey
step2 <- image_composite(step1, lightGrey, operator = "darken") # everything lighter than dark grey and darker than light grey
step3 <- image_normalize(step2) # light Grrey becomes white dark grey becomes black
step4 <- image_composite(mainPic2, lightGrey, operator = "darken")
lowContrast <- image_composite(step4, step2, operator = "lighten")
highContrast <- image_normalize(lowContrast)
lessContrast <- image_composite(mainPic2, lowContrast, operator = "multiply")
moreContrast <- image_composite(mainPic2, highContrast, operator = "multiply")
}
if (return == 0) {
return(mainPic2)
}
if (return == 1) {
return(step1)
}
if (return == 2) {
return(step2)
}
if (return == 3) {
return(step3)
}
if (return == 4) {
return(step4)
}
if (return == 5) {
return(lessContrast)
}
if (return == 6) {
return(moreContrast)
}
if (return == 7) {
imageStack <- c(mainPic2, step1, step2, step3, step4, lessContrast, moreContrast)
return(image_append(imageStack))
}
}adjustPicture <- function(pictureIn, pixels = 1000, imageFlip = FALSE, imageFlop = FALSE,
devtools::load_all(".")
dove = demo_dd()
adjPicApp(dove)
adjustPicture(dove,
pixels = 800,
imageFlip = FALSE,
imageFlop = FALSE,
imageRotate =45,
bsh = c(116,100,100),
darkGreyIn = 0.49,
lightGreyIn = 0.81,
crop = c(1,1,0,0),
return = 3,
imageNegate = FALSE,
maxPixel = 7000,
aspect = 0,
enlarge = 0,
offCenter = 0,
offRight = 0,
backCol1 = '#000000')
styler::style_text("adjPicApp <- function(pictureIn) {
photoName = substitute(pictureIn)
shinyApp(ui = ui2,
server = function(input, output) {
library(magick)
library(ArtMathdeDD)
backColor=reactive(rgb(input$Grey,input$Grey,input$Grey))
toUse = reactive(as.numeric(input$useWhich_photo) - 1)
crop1 = reactive( c(input$cutHorizontal[2]-input$cutHorizontal[1], input$cutVertical[2]-input$cutVertical[1]
,               input$cutHorizontal[1],input$cutVertical[1]) )
#photoName = substitute(pic0)
#photoName =reactive(renderText({pictureIn}))
output$outPhoto <- renderImage({
outPhoto = adjustPicture(
pictureIn,
pixels = input$pixels,
imageFlip = input$imageFlip,
imageFlop = input$imageFlop,
imageRotate = input$imageRotate,
bsh = c(input$bPhoto, input$sPhoto, input$hPhoto),
darkGreyIn = input$black_n_white_photo[[1]],
lightGreyIn = input$black_n_white_photo[[2]],
crop = crop1(),
return = toUse(),
imageNegate = input$imageNegate,
maxPixel = 7000,
aspect = input$Aspect,
enlarge = input$Enlarge,
offCenter = input$offCenter,
offRight = input$offRight,
backCol1 = backColor()) #ends adjustPicture
outfile <- tempfile(fileext = '.png')
image_write(outPhoto, outfile)
return(list(
src =outfile,
filetype = 'image/jpeg',
alt = 'mainPicDesc'))
}, deleteFile = FALSE)
output$metaData <- renderPrint({
h4(
paste0('adjustPicture(', photoName ,','),
paste0(  'pixels = ', input$pixels,','),
paste0(     'imageFlip = ', input$imageFlip, ','),
paste0(    'imageFlop = ', input$imageFlop, ','),
paste0(     'imageRotate =', input$imageRotate, ','),
paste0(     'bsh = c(', input$bPhoto,',', input$sPhoto,',', input$hPhoto,'),'),
paste0(   'darkGreyIn = ',input$black_n_white_photo[[1]],','),
paste0(   'lightGreyIn = ',input$black_n_white_photo[[2]],','),
paste0(   'crop = c(', crop1()[1],',',crop1()[2],',',crop1()[3],',',crop1()[4], '),'),
paste0(  'return = ',toUse(),','),
paste0(    'imageNegate = ',input$imageNegate,','),
paste0(  'maxPixel = 7000,'),
paste0(  'aspect = ',input$Aspect,','),
paste0(    'enlarge = ', input$Enlarge,','),
paste0(    'offCenter = ', input$offCenter,','),
paste0(    'offRight = ', input$offRight,','),
paste0(   'backCol1 = ',',backColor(),',')') #ends adjustPicture'
)
})
} # ends server
)} #ends shinyApp
")
devtools::load_all(".")
usethis::use_import_from("shiny", "shinyApp")
adjPicApp(dove)
adjustPicture(dove,
pixels = 400,
imageFlip = FALSE,
imageFlop = FALSE,
imageRotate =0,
bsh = c(93,185,25),
darkGreyIn = 0.25,
lightGreyIn = 0.75,
crop = c(1,1,0,0),
return = 0,
imageNegate = FALSE,
maxPixel = 7000,
aspect = 0,
enlarge = 0,
offCenter = 0,
offRight = 0,
backCol1 = ,backColor(),)
devtools::load_all(".")
adjPicApp(dove)
adjustPicture(dove,
pixels = 200,
imageFlip = FALSE,
imageFlop = FALSE,
imageRotate =0,
bsh = c(116,100,100),
darkGreyIn = 0.25,
lightGreyIn = 0.75,
crop = c(1,1,0,0),
return = 0,
imageNegate = FALSE,
maxPixel = 7000,
aspect = 0,
enlarge = 0,
offCenter = 0,
offRight = 0,
backCol1 = '#000000')
